(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Threelet"] = factory();
	else
		root["Threelet"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/SkyHelper.js":
/*!**************************!*\
  !*** ./src/SkyHelper.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// credits: SkyHelper is based on the sky example -\n// https://github.com/mrdoob/three.js/blob/master/examples/webgl_shaders_sky.html\nvar SkyHelper = function () {\n    function SkyHelper(classSky) {\n        _classCallCheck(this, SkyHelper);\n\n        this._classSky = classSky;\n        this._effectController = {\n            turbidity: 10,\n            rayleigh: 2,\n            mieCoefficient: 0.005,\n            mieDirectionalG: 0.8,\n            luminance: 1,\n            inclination: 0.49, // elevation / inclination\n            azimuth: 0.25, // Facing front,\n            sun: !true\n        };\n        this._updateUniforms = null;\n    }\n\n    _createClass(SkyHelper, [{\n        key: \"init\",\n        value: function init() {\n            var _this = this;\n\n            // Add Sky\n            var sky = new this._classSky();\n            sky.scale.setScalar(450000);\n            // scene.add( sky );\n            // Add Sun Helper\n            var sunSphere = new THREE.Mesh(new THREE.SphereBufferGeometry(20000, 16, 8), new THREE.MeshBasicMaterial({ color: 0xffffff }));\n            sunSphere.position.y = -700000;\n            sunSphere.visible = false;\n            // scene.add( sunSphere );\n            /// GUI\n            var distance = 400000;\n\n            // function guiChanged() {\n            //-------\n            this._updateUniforms = function () {\n                var effectController = _this._effectController;\n\n                var uniforms = sky.material.uniforms;\n                uniforms[\"turbidity\"].value = effectController.turbidity;\n                uniforms[\"rayleigh\"].value = effectController.rayleigh;\n                uniforms[\"luminance\"].value = effectController.luminance;\n                uniforms[\"mieCoefficient\"].value = effectController.mieCoefficient;\n                uniforms[\"mieDirectionalG\"].value = effectController.mieDirectionalG;\n                var theta = Math.PI * (effectController.inclination - 0.5);\n                var phi = 2 * Math.PI * (effectController.azimuth - 0.5);\n                sunSphere.position.x = distance * Math.cos(phi);\n                sunSphere.position.y = distance * Math.sin(phi) * Math.sin(theta);\n                sunSphere.position.z = distance * Math.sin(phi) * Math.cos(theta);\n                sunSphere.visible = effectController.sun;\n                uniforms[\"sunPosition\"].value.copy(sunSphere.position);\n                // renderer.render( scene, camera );\n            };\n\n            // var gui = new dat.GUI();\n            // gui.add( effectController, \"turbidity\", 1.0, 20.0, 0.1 ).onChange( guiChanged );\n            // gui.add( effectController, \"rayleigh\", 0.0, 4, 0.001 ).onChange( guiChanged );\n            // gui.add( effectController, \"mieCoefficient\", 0.0, 0.1, 0.001 ).onChange( guiChanged );\n            // gui.add( effectController, \"mieDirectionalG\", 0.0, 1, 0.001 ).onChange( guiChanged );\n            // gui.add( effectController, \"luminance\", 0.0, 2 ).onChange( guiChanged );\n            // gui.add( effectController, \"inclination\", 0, 1, 0.0001 ).onChange( guiChanged );\n            // gui.add( effectController, \"azimuth\", 0, 1, 0.0001 ).onChange( guiChanged );\n            // gui.add( effectController, \"sun\" ).onChange( guiChanged );\n            // guiChanged();\n            //--------\n            this._updateUniforms(); // first time\n            return [sky, sunSphere];\n        }\n    }, {\n        key: \"updateUniforms\",\n        value: function updateUniforms() {\n            var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (!this._updateUniforms) {\n                throw 'updateUniforms(): error; init() must be called first';\n            }\n            Object.assign(this._effectController, params);\n            this._updateUniforms();\n        }\n    }]);\n\n    return SkyHelper;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (SkyHelper);\n\n//# sourceURL=webpack://Threelet/./src/SkyHelper.js?");

/***/ }),

/***/ "./src/VRControlHelper.js":
/*!********************************!*\
  !*** ./src/VRControlHelper.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// credits: VRControlHelper is based on the dragging example -\n// https://github.com/mrdoob/three.js/blob/master/examples/webvr_dragging.html\nvar VRControlHelper = function () {\n    function VRControlHelper(renderer) {\n        _classCallCheck(this, VRControlHelper);\n\n        // this.controllerArmLength = 0;\n        this.controllerArmLength = 0.25;\n        this.controllerLineLength = 5;\n\n        this.tempMatrix = new THREE.Matrix4();\n        this.raycaster = new THREE.Raycaster();\n        this.intersected = [];\n\n        this.group = new THREE.Group();\n\n        this.controllers = this._createControllers(renderer);\n        this.controllersState = {\n            touchpads: [],\n            triggers: [],\n            poses: [],\n            ids: []\n        };\n\n        this._eventListeners = {};\n    }\n\n    _createClass(VRControlHelper, [{\n        key: 'getInteractiveGroup',\n        value: function getInteractiveGroup() {\n            return this.group;\n        }\n    }, {\n        key: 'getControllers',\n        value: function getControllers() {\n            return this.controllers;\n        }\n    }, {\n        key: 'getControllersState',\n        value: function getControllersState() {\n            return this.controllersState;\n        }\n    }, {\n        key: 'toggleTriggerPressVisibility',\n        value: function toggleTriggerPressVisibility(i, tf) {\n            this.controllers[i].getObjectByName('trigger-press').visible = tf;\n        }\n    }, {\n        key: 'toggleTouchpadPointVisibility',\n        value: function toggleTouchpadPointVisibility(i, type, tf) {\n            var obj = this.controllers[i].getObjectByName('touchpad-' + type);\n            obj.visible = tf;\n            if (tf === false) {\n                obj.position.z = 99999; // kludge: workaround flickering\n            }\n        }\n    }, {\n        key: 'updateTouchpadPoint',\n        value: function updateTouchpadPoint(i, type) {\n            var touchpad = this.controllersState.touchpads[i];\n            var obj = this.controllers[i].getObjectByName('touchpad-' + type);\n            obj.position.set(touchpad.axes0 * 0.025, 0.0125, touchpad.axes1 * 0.025 - this.controllerArmLength - 0.025);\n        }\n    }, {\n        key: '_createControllers',\n        value: function _createControllers(renderer) {\n            // maybe load a 3D model instead of the box\n            // https://github.com/mrdoob/three.js/blob/master/examples/webvr_paint.html\n            var walls = new THREE.LineSegments(new THREE.EdgesGeometry(new THREE.BoxBufferGeometry(0.05, 0.025, 0.1)), new THREE.LineBasicMaterial({ color: 0xcccccc }));\n            walls.position.set(0, 0, -this.controllerArmLength); // customize Z for \"arm\" length\n\n            var line = new THREE.Line(new THREE.BufferGeometry().setFromPoints([new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, -1)]), new THREE.LineBasicMaterial({ color: 0xcccccc }));\n            line.position.set(0, 0, -this.controllerArmLength);\n            line.name = 'controller-line';\n            line.scale.z = this.controllerLineLength - this.controllerArmLength;\n\n            var triggerLoop = new THREE.LineLoop(new THREE.CircleGeometry(0.0125, 64), new THREE.LineBasicMaterial({ color: 0xcccccc }));\n            triggerLoop.geometry.vertices.shift(); // remove the center vertex\n            triggerLoop.position.set(0, 0, -this.controllerArmLength - 0.05);\n\n            var triggerCircle = new THREE.Mesh(new THREE.CircleGeometry(0.0125, 64), new THREE.MeshBasicMaterial({ color: 0x00cccc }));\n            triggerCircle.position.set(0, 0, -this.controllerArmLength - 0.05);\n            triggerCircle.material.side = THREE.DoubleSide;\n            triggerCircle.visible = false;\n            triggerCircle.name = 'trigger-press';\n\n            var padLoop = new THREE.LineLoop(new THREE.CircleGeometry(0.025, 64), new THREE.LineBasicMaterial({ color: 0xcccccc }));\n            padLoop.geometry.vertices.shift(); // remove the center vertex\n            padLoop.position.set(0, 0.0125, -this.controllerArmLength - 0.025);\n            padLoop.rotation.x = Math.PI / 2;\n\n            var padLoopTouch = new THREE.LineLoop(new THREE.CircleGeometry(0.005, 64), new THREE.LineBasicMaterial({ color: 0x00cccc }));\n            padLoopTouch.geometry.vertices.shift(); // remove the center vertex\n            padLoopTouch.position.set(0, 0.0125, -this.controllerArmLength - 0.025);\n            padLoopTouch.rotation.x = Math.PI / 2;\n            padLoopTouch.visible = false;\n            padLoopTouch.name = 'touchpad-touch';\n\n            var padCircleTouch = new THREE.Mesh(new THREE.CircleGeometry(0.005, 64), new THREE.MeshBasicMaterial({ color: 0x00cccc }));\n            padCircleTouch.position.set(0, 0.0125, -this.controllerArmLength - 0.025);\n            padCircleTouch.rotation.x = Math.PI / 2;\n            padCircleTouch.material.side = THREE.DoubleSide;\n            padCircleTouch.visible = false;\n            padCircleTouch.name = 'touchpad-press';\n\n            // https://github.com/mrdoob/three.js/blob/master/examples/webvr_dragging.html\n            var controllers = [0, 1].map(function (i) {\n                return renderer.vr.getController(i).add(walls.clone()).add(line.clone()).add(triggerLoop.clone()).add(triggerCircle.clone()).add(padLoop.clone()).add(padLoopTouch.clone()).add(padCircleTouch.clone());\n            });\n            console.log('@@ controllers:', controllers);\n\n            if (0) {}\n\n            return controllers;\n        }\n    }, {\n        key: '_addSelectListener',\n        value: function _addSelectListener(eventName, listener) {\n            var _this = this;\n\n            this.controllers.forEach(function (cont) {\n                cont.addEventListener(eventName, listener.bind(_this));\n            });\n        }\n    }, {\n        key: 'enableDragInteractiveGroup',\n        value: function enableDragInteractiveGroup() {\n            this._addSelectListener('selectstart', this.onSelectStartDrag);\n            this._addSelectListener('selectend', this.onSelectEndDrag);\n        }\n    }, {\n        key: 'onSelectStartDrag',\n        value: function onSelectStartDrag(event) {\n            var controller = event.target;\n            var intersections = this.getIntersections(controller, false);\n            console.log('@@ onSelectStart(): intersections.length:', intersections.length);\n\n            if (intersections.length > 0) {\n                var intersection = intersections[0];\n\n                this.tempMatrix.getInverse(controller.matrixWorld);\n\n                var object = intersection.object;\n                object.matrix.premultiply(this.tempMatrix);\n                object.matrix.decompose(object.position, object.quaternion, object.scale);\n                if (object.material.emissive) {\n                    object.material.emissive.b = 1;\n                }\n                controller.add(object);\n\n                controller.userData.selected = object;\n            }\n        }\n    }, {\n        key: 'onSelectEndDrag',\n        value: function onSelectEndDrag(event) {\n            console.log('@@ onSelectEnd(): hi');\n            var controller = event.target;\n            if (controller.userData.selected !== undefined) {\n                var object = controller.userData.selected;\n                object.matrix.premultiply(controller.matrixWorld);\n                object.matrix.decompose(object.position, object.quaternion, object.scale);\n                if (object.material.emissive) {\n                    object.material.emissive.b = 0;\n                }\n                this.group.add(object);\n\n                controller.userData.selected = undefined;\n            }\n        }\n    }, {\n        key: 'getIntersections',\n        value: function getIntersections(controller) {\n            var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            // console.log('@@ getIntersections(): hi');\n            return this.raycastFromController(controller, this.group.children, recursive);\n        }\n    }, {\n        key: 'raycastFromController',\n        value: function raycastFromController(controller, objs) {\n            var recursive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            this.tempMatrix.identity().extractRotation(controller.matrixWorld);\n            this.raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);\n            this.raycaster.ray.direction.set(0, 0, -1).applyMatrix4(this.tempMatrix);\n            return this.raycaster.intersectObjects(objs, recursive);\n        }\n\n        // mod of findGamepad() of three.js r104\n\n    }, {\n        key: 'updateControllers',\n\n        // mod of updateControllers() of three.js r104\n        value: function updateControllers() {\n            var stat = this.controllersState;\n\n            for (var i = 0; i < this.controllers.length; i++) {\n                var controller = this.controllers[i];\n                var gamepad = VRControlHelper._findGamepad(i);\n                // console.log('@@ updateControllers(): i, gamepad:', i, gamepad);\n\n                if (gamepad === undefined || gamepad.pose === undefined || gamepad.pose === null) {\n                    // this controller seems lost; reset the state\n                    stat.triggers[i] = undefined;\n                    stat.touchpads[i] = undefined;\n                    stat.poses[i] = undefined;\n                    stat.ids[i] = undefined;\n                    return;\n                }\n\n                var buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1; // for trigger\n                var buttonIdTouchpad = 0;\n\n                stat.poses[i] = gamepad.pose;\n                stat.ids[i] = gamepad.id;\n\n                if (0) { var _gamepad$buttons, b0, b1; }\n\n                //-------- begin touchpad handling --------\n                var touched = gamepad.buttons[buttonIdTouchpad].touched;\n                var pressed = gamepad.buttons[buttonIdTouchpad].pressed;\n                var axes0 = gamepad.axes[0];\n                var axes1 = gamepad.axes[1];\n\n                if (stat.touchpads[i] === undefined) {\n                    stat.touchpads[i] = {\n                        touched: false,\n                        pressed: false,\n                        axes0: 0,\n                        axes1: 0\n                    };\n                };\n                var touchpad = stat.touchpads[i];\n\n                if (touchpad.touched !== touched) {\n                    var func = touched === true ? this._eventListeners['vr-touchpad-touch-start'] : this._eventListeners['vr-touchpad-touch-end'];\n                    if (func) func(i, axes0, axes1);\n                }\n\n                if (touchpad.pressed !== pressed) {\n                    var _func = pressed === true ? this._eventListeners['vr-touchpad-press-start'] : this._eventListeners['vr-touchpad-press-end'];\n                    if (_func) _func(i, axes0, axes1);\n                }\n\n                // diff touchpad states done; record the new state now\n                touchpad.touched = touched;\n                touchpad.pressed = pressed;\n                touchpad.axes0 = axes0;\n                touchpad.axes1 = axes1;\n                //-------- end touchpad handling --------\n\n                var trigger = gamepad.buttons[buttonId].pressed;\n\n                if (stat.triggers[i] === undefined) stat.triggers[i] = false;\n\n                if (stat.triggers[i] !== trigger) {\n                    stat.triggers[i] = trigger;\n                    var _func2 = stat.triggers[i] === true ? this._eventListeners['vr-trigger-press-start'] : this._eventListeners['vr-trigger-press-end'];\n                    if (_func2) _func2(i);\n                }\n            }\n        }\n    }, {\n        key: 'intersectObjects',\n        value: function intersectObjects() {\n            this._cleanIntersected();\n            if (this.controllers[0]) {\n                this._intersectObjects(this.controllers[0]);\n            }\n            if (this.controllers[1]) {\n                this._intersectObjects(this.controllers[1]);\n            }\n        }\n    }, {\n        key: '_intersectObjects',\n        value: function _intersectObjects(controller) {\n            // console.log('@@ intersectObjects(): hi');\n            // Do not highlight when already selected\n            if (controller.userData.selected !== undefined) return;\n\n            var intersections = this.getIntersections(controller);\n            // console.log('@@ intersections:', intersections);\n\n            var line = controller.getObjectByName('controller-line');\n            if (intersections.length > 0) {\n                var intersection = intersections[0];\n                var object = intersection.object;\n                if (object.material.emissive) {\n                    object.material.emissive.r = 1;\n                }\n                this.intersected.push(object);\n                // console.log('@@ intersection.distance:', intersection.distance);\n                line.scale.z = intersection.distance - this.controllerArmLength;\n            } else {\n                line.scale.z = this.controllerLineLength - this.controllerArmLength;\n            }\n        }\n    }, {\n        key: '_cleanIntersected',\n        value: function _cleanIntersected() {\n            // console.log('@@ cleanIntersected(): hi');\n            while (this.intersected.length) {\n                var object = this.intersected.pop();\n                if (object.material.emissive) {\n                    object.material.emissive.r = 0;\n                }\n            }\n        }\n    }], [{\n        key: '_findGamepad',\n        value: function _findGamepad(id) {\n            var gamepads = navigator.getGamepads && navigator.getGamepads();\n            for (var i = 0, j = 0, l = gamepads.length; i < l; i++) {\n                var gamepad = gamepads[i];\n                if (gamepad && (gamepad.id === 'Daydream Controller' || gamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' || gamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith('Oculus Touch') || gamepad.id.startsWith('Spatial Controller'))) {\n                    if (j === id) return gamepad;\n                    j++;\n                }\n            }\n        }\n    }, {\n        key: 'createTestHemisphereLight',\n        value: function createTestHemisphereLight() {\n            return new THREE.HemisphereLight(0x808080, 0x606060);\n        }\n    }, {\n        key: 'createTestDirectionalLight',\n        value: function createTestDirectionalLight() {\n            var light = new THREE.DirectionalLight(0xffffff);\n            light.position.set(0, 6, 0);\n            light.castShadow = true;\n            light.shadow.camera.top = 2;\n            light.shadow.camera.bottom = -2;\n            light.shadow.camera.right = 2;\n            light.shadow.camera.left = -2;\n            light.shadow.mapSize.set(4096, 4096);\n            return light;\n        }\n    }, {\n        key: 'createTestObjects',\n        value: function createTestObjects() {\n            var objs = [];\n            var geoms = [new THREE.BoxBufferGeometry(0.2, 0.2, 0.2), new THREE.ConeBufferGeometry(0.2, 0.2, 64), new THREE.CylinderBufferGeometry(0.2, 0.2, 0.2, 64), new THREE.IcosahedronBufferGeometry(0.2, 3), new THREE.TorusBufferGeometry(0.2, 0.04, 64, 32)];\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = geoms[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var geom = _step.value;\n\n                    var object = new THREE.Mesh(geom, new THREE.MeshStandardMaterial({\n                        color: Math.random() * 0xffffff,\n                        roughness: 0.7,\n                        metalness: 0.0\n                    }));\n                    object.position.set(2 * Math.random(), 2 * Math.random(), -1);\n                    // console.log('@@ object:', object);\n                    object.rotation.x = Math.random() * 2 * Math.PI;\n                    object.rotation.y = Math.random() * 2 * Math.PI;\n                    object.rotation.z = Math.random() * 2 * Math.PI;\n                    object.scale.setScalar(Math.random() + 0.5);\n                    object.castShadow = true;\n                    object.receiveShadow = true;\n                    objs.push(object);\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            return objs;\n        }\n    }]);\n\n    return VRControlHelper;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (VRControlHelper);\n\n//# sourceURL=webpack://Threelet/./src/VRControlHelper.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _VRControlHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VRControlHelper.js */ \"./src/VRControlHelper.js\");\n/* harmony import */ var _SkyHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SkyHelper.js */ \"./src/SkyHelper.js\");\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Threelet - https://github.com/w3reality/threelet\n// A three.js scene viewer with batteries (MIT License)\n\nvar __version = \"0.9.9dev\";\n\n\n\n\nvar Threelet = function () {\n    function Threelet(params) {\n        var _this = this;\n\n        _classCallCheck(this, Threelet);\n\n        this.version = __version;\n        var defaults = {\n            // ---- required ----\n            canvas: null,\n            // ---- viewer options ----\n            optScene: null,\n            optAxes: true, // axes and a unit lattice\n            optCameraPosition: [0, 1, 2] // initial camera position in desktop mode\n        };\n        var actual = Object.assign({}, defaults, params);\n\n        var canvas = actual.canvas;\n        if (!canvas) {\n            throw 'error: canvas not provided';\n        }\n        // kludge for mouse events and overlay\n        canvas.style.display = 'block'; // https://stackoverflow.com/questions/8600393/there-is-a-4px-gap-below-canvas-video-audio-elements-in-html5\n\n        // basics\n\n        var _Threelet$_initBasics = Threelet._initBasics(canvas, actual);\n\n        var _Threelet$_initBasics2 = _slicedToArray(_Threelet$_initBasics, 3);\n\n        this.scene = _Threelet$_initBasics2[0];\n        this.camera = _Threelet$_initBasics2[1];\n        this.renderer = _Threelet$_initBasics2[2];\n\n\n        this.resizeCanvas(canvas, true); // first time\n\n        // render function\n        this.render = function () {\n            var isPresenting = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            // console.log('@@ render(): isPresenting:', isPresenting);\n            if (_this.stats) {\n                _this.stats.update();\n            }\n            if (!isPresenting) {\n                _this.resizeCanvas(canvas);\n            }\n            _this.renderer.render(_this.scene, _this.camera);\n        };\n\n        // events\n        this._eventListeners = {};\n        this._eventListenerNames = [\n        // TODO add keyboard events\n        'mouse-down', // alias of 'mouse-down-left'\n        'mouse-down-left', 'mouse-down-middle', 'mouse-down-right', 'mouse-click', // alias of 'mouse-click-left'\n        'mouse-click-left', 'mouse-click-middle', 'mouse-click-right', 'mouse-move', 'mouse-drag-end', 'vr-touchpad-touch-start', 'vr-touchpad-touch-end', 'vr-touchpad-press-start', 'vr-touchpad-press-end', 'vr-trigger-press-start', 'vr-trigger-press-end'];\n\n        //======== FIXME ?? - Oculus Go's desktop mode, OrbitControls breaks mouse events...\n        this._initMouseListeners(this.renderer.domElement);\n        //======== approach below is this too hackish and still not sure how to trigger\n        //         mouse events for *both* overlay and canvas\n        // this._initMouseListeners(document.querySelector('#overlay'));\n        // <!-- https://stackoverflow.com/questions/5763911/placing-a-div-within-a-canvas -->\n        // <style>\n        //     #canvas-wrap { position:relative } /* Make this a positioned parent */\n        //     #overlay {\n        //         position: absolute;\n        //         top: 0px; left: 0px; width: 100%; height: 50%;\n        //         background-color: #88000088; /* debug */\n        //         /* pointer-events: none; */\n        //     }\n        // </style>\n        // <div id=\"canvas-wrap\">\n        //   <canvas id=\"canvas\" style=\"width: 100%; height: 100%;\"></canvas>\n        //   <div id=\"overlay\"></div>\n        // </div>\n\n        // raycasting\n        this._raycaster = new THREE.Raycaster();;\n\n        // rendering loop and scene logic update\n        this.clock = new THREE.Clock();\n        this.timeLast = this.clock.getElapsedTime();\n        this.iid = null;\n        this.update = null;\n\n        // plugin module table\n        this.modTable = {\n            'mod-controls': this._setupControls,\n            'mod-stats': this._setupStats,\n            'mod-webvr': this._setupWebVR,\n            'mod-sky': this._setupSky\n        };\n\n        // for controls module\n        this.controls = null;\n\n        // for stats module\n        this.stats = null;\n\n        // for sky module\n        this.skyHelper = null;\n\n        // for WebVR module\n        this.fpsDesktopLast = 0;\n        this._vrcHelper = new _VRControlHelper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.renderer);\n        this.vrButton = null;\n        // https://stackoverflow.com/questions/49471653/in-three-js-while-using-webvr-how-do-i-move-the-camera-position\n        // this.dolly = new THREE.Group();\n        // this.dolly.add(this.camera);\n\n        // api\n        this.onCreate();\n    }\n\n    _createClass(Threelet, [{\n        key: 'onCreate',\n        value: function onCreate() {\n            this.render(); // _first _time\n        }\n    }, {\n        key: 'onDestroy',\n        value: function onDestroy() {}\n        // nop for the moment\n\n\n        // plugin module setup function\n\n    }, {\n        key: 'setup',\n        value: function setup(modTitle, Module) {\n            var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n            if (modTitle in this.modTable) {\n                this.modTable[modTitle].bind(this)(Module, opts);\n            } else {\n                console.warn('setup(): unsupported module title:', modTitle);\n            }\n        }\n    }, {\n        key: '_setupControls',\n        value: function _setupControls(Module, opts) {\n            this.controls = new Module(this.camera, this.renderer.domElement);\n            this.controls.addEventListener('change', this.render.bind(null, false));\n            if (Threelet.isVrSupported()) {\n                // FIXME - OrbitControl breaks _initMouseListeners() on Oculus Go\n                console.warn('not enabling OrbitControls (although requested) on this VR-capable browser.');\n                this.controls.enabled = false; // https://stackoverflow.com/questions/20058579/threejs-disable-orbit-camera-while-using-transform-control\n            }\n        }\n    }, {\n        key: '_setupStats',\n        value: function _setupStats(Module, opts) {\n            var defaults = {\n                panelType: 0, // 0: fps, 1: ms, 2: mb, 3+: custom\n                appendTo: document.body\n            };\n            var actual = Object.assign({}, defaults, opts);\n\n            var stats = this.stats = new Module();\n            stats.showPanel(actual.panelType);\n            if (actual.appendTo !== document.body) {\n                stats.dom.style.position = 'absolute';\n            }\n            actual.appendTo.appendChild(stats.dom);\n        }\n    }, {\n        key: 'getSkyHelper',\n        value: function getSkyHelper() {\n            return this.skyHelper;\n        }\n    }, {\n        key: '_setupSky',\n        value: function _setupSky(Module, opts) {\n            var _scene;\n\n            this.skyHelper = new _SkyHelper_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](Module);\n            // console.log('@@ this.skyHelper:', this.skyHelper);\n\n            (_scene = this.scene).add.apply(_scene, _toConsumableArray(this.skyHelper.init()));\n            this.skyHelper.updateUniforms({\n                turbidity: 1\n            });\n        }\n    }, {\n        key: 'setupVRControlHelperTest',\n        value: function setupVRControlHelperTest() {\n            this.scene.add(_VRControlHelper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createTestHemisphereLight());\n            this.scene.add(_VRControlHelper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createTestDirectionalLight());\n\n            this.enableInteractiveGroup('drag');\n            var group = this.getInteractiveGroup();\n            _VRControlHelper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createTestObjects().forEach(function (obj) {\n                return group.add(obj);\n            });\n            this.scene.add(group);\n        }\n    }, {\n        key: 'getVRControlHelper',\n        value: function getVRControlHelper() {\n            // deprecated\n            console.warn('@@ getVRControlHelper(): i am deprecated!!');\n            return this._vrcHelper;\n        }\n    }, {\n        key: 'getInteractiveGroup',\n        value: function getInteractiveGroup() {\n            return this._vrcHelper.getInteractiveGroup();\n        }\n    }, {\n        key: 'enableInteractiveGroup',\n        value: function enableInteractiveGroup(mode) {\n            if (mode === 'drag') {\n                this._vrcHelper.enableDragInteractiveGroup();\n                // TODO disable interface ??\n            } else {\n                console.warn('@@ unsupported interactive mode:', mode);\n            }\n        }\n    }, {\n        key: 'getControllersState',\n        value: function getControllersState() {\n            return this._vrcHelper.getControllersState();\n        }\n    }, {\n        key: 'displayControllerEvent',\n        value: function displayControllerEvent(i, what, tf) {\n            // only for updating visibility\n            if (what === 'vr-trigger-press') {\n                this._vrcHelper.toggleTriggerPressVisibility(i, tf);\n            } else if (what === 'vr-touchpad-touch') {\n                this._vrcHelper.toggleTouchpadPointVisibility(i, 'touch', tf);\n            } else if (what === 'vr-touchpad-press') {\n                this._vrcHelper.toggleTouchpadPointVisibility(i, 'press', tf);\n            } else {\n                console.warn('@@ unsupported what:', what);\n            }\n            // 44:        vrcHelper.toggleTouchpadPointVisibility(i, 'touch', true);\n            // 44:        vrcHelper.toggleTouchpadPointVisibility(i, 'press', true);\n            // 88:        vrcHelper.toggleTriggerPressVisibility( i,          true);\n        }\n    }, {\n        key: 'updateControllerTouchpad',\n        value: function updateControllerTouchpad(i, what) {\n            // only for updating the position based on the current axes values\n            if (what === 'vr-touchpad-touch') {\n                this._vrcHelper.updateTouchpadPoint(i, 'touch');\n            } else if (what === 'vr-touchpad-press') {\n                this._vrcHelper.updateTouchpadPoint(i, 'press');\n            } else {\n                console.warn('@@ unsupported what:', what);\n            }\n            //            vrcHelper.updateTouchpadPoint(          i, 'press');\n            //            vrcHelper.updateTouchpadPoint(          i, 'touch');\n        }\n    }, {\n        key: '_setupWebVR',\n        value: function _setupWebVR(Module) {\n            var _this2 = this;\n\n            var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            var defaults = {\n                appendTo: document.body\n            };\n            var actual = Object.assign({}, defaults, opts);\n\n            // https://threejs.org/docs/manual/en/introduction/How-to-create-VR-content.html\n            this.renderer.vr.enabled = Threelet.isVrSupported();\n\n            var btn = this._createVRButton(Module);\n            actual.appendTo.appendChild(btn);\n            this.vrButton = btn;\n\n            if (Threelet.isVrSupported()) {\n                this._vrcHelper.getControllers().forEach(function (cont) {\n                    return _this2.scene.add(cont);\n                });\n            }\n        }\n    }, {\n        key: '_createVRButton',\n        value: function _createVRButton(classWebVR) {\n            var _this3 = this;\n\n            var btn = classWebVR.createButton(this.renderer);\n            btn.style.top = btn.style.bottom;\n            btn.style.bottom = '';\n            if (Threelet.isVrSupported()) {\n                btn.addEventListener('click', function (ev) {\n                    console.log('@@ btn.textContent:', btn.textContent);\n                    if (btn.textContent.startsWith('ENTER')) {\n                        _this3.enterVR(function () {\n                            // onError\n                            console.log('@@ device:', _this3.renderer.vr.getDevice());\n                            console.log('@@ controller:', _this3.renderer.vr.getController(0));\n                            // TODO (how to programmatically exit the VR session????)\n                            // this.updateLoop(this.fpsDesktopLast); // wanna call this after exiting the vr session...\n                        });\n                    }\n                });\n            }\n            return btn;\n        }\n    }, {\n        key: 'enterVR',\n        value: function enterVR() {\n            var _this4 = this;\n\n            var onError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            // try entering VR for at most tryCountMax * delay (ms)\n            var tryCountMax = 30,\n                delay = 400;\n            var tryCount = 0;\n            var _enterVR = function _enterVR() {\n                setTimeout(function () {\n                    tryCount++;\n                    if (_this4.renderer.vr.isPresenting()) {\n                        console.log('@@ transition to vr loop!! (tryCount: ' + tryCount + ')');\n                        _this4.updateLoop(-1);\n                    } else {\n                        console.log('@@ vr not ready after: ' + tryCount * delay + ' ms (tryCount: ' + tryCount + ')');\n                        if (tryCount < tryCountMax) {\n                            _enterVR(tryCountMax, delay); // try harder\n                        } else if (onError) {\n                            console.error('@@ enter vr failed!!');\n                            onError();\n                        }\n                    }\n                }, delay); // need some delay for this.renderer.vr.isPresenting() to become true\n            };\n\n            this.updateLoop(0); // first, make sure desktop loop is stopped\n            _enterVR(tryCountMax, delay);\n        }\n    }, {\n        key: 'updateMechanics',\n        value: function updateMechanics() {\n            // update for the scene logic\n            var time = this.clock.getElapsedTime();\n            var dt = time - this.timeLast;\n            this.timeLast = time;\n            if (this.update) {\n                this.update(time, dt);\n            }\n        }\n    }, {\n        key: 'updateLoop',\n        value: function updateLoop(fps) {\n            var _this5 = this;\n\n            if (this.iid !== null) {\n                // console.log('@@ updateLoop(): clearing interval:', this.iid);\n                clearInterval(this.iid);\n            }\n\n            if (fps === 0) {\n                return; // stop the loop\n            } else if (fps < 0) {\n                // start the vr loop\n                this.renderer.setAnimationLoop(function () {\n                    if (!_this5.renderer.vr.isPresenting()) {\n                        _this5.renderer.setAnimationLoop(null); // stop the vr loop\n                        console.log('@@ transition back to desktop');\n                        // console.log('fps last:', this.fpsDesktopLast);\n                        return _this5.updateLoop(_this5.fpsDesktopLast);\n                    }\n\n                    _this5.updateMechanics();\n                    _this5._vrcHelper.intersectObjects();\n                    _this5._vrcHelper.updateControllers();\n                    _this5.render(true);\n                });\n                return;\n            }\n\n            // FIXME for this naive dev version, not looping with rAF()...\n            this.fpsDesktopLast = fps;\n            this.iid = setInterval(function () {\n                _this5.updateMechanics();\n                _this5.render();\n            }, 1000 / fps);\n            // console.log('@@ updateLoop(): new interval:', this.iid);\n        }\n    }, {\n        key: 'log',\n\n\n        // log with time splits\n        value: function log() {\n            var _console;\n\n            if (!this._last) {\n                // first time\n                this._last = performance.now() / 1000;\n            }\n            var now = performance.now() / 1000;\n            console.log('==== ' + now.toFixed(3) + ' +' + (now - this._last).toFixed(3) + ' ====');\n            (_console = console).log.apply(_console, arguments);\n            console.log('========');\n            this._last = now;\n        }\n    }, {\n        key: 'resizeCanvas',\n        value: function resizeCanvas(canvas) {\n            var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n            Threelet._resizeCanvasToDisplaySize(canvas, this.renderer, this.camera, force);\n        }\n\n        // https://stackoverflow.com/questions/29884485/threejs-canvas-size-based-on-container\n\n    }, {\n        key: 'setEventListener',\n\n\n        // deprecated; for compat only\n        value: function setEventListener(eventName, listener) {\n            this.on(eventName, listener);\n        }\n    }, {\n        key: 'on',\n        value: function on(eventName, listener) {\n            if (this._eventListenerNames.includes(eventName)) {\n                // aliases\n                if (eventName === 'mouse-down') eventName = 'mouse-down-left';\n                if (eventName === 'mouse-click') eventName = 'mouse-click-left';\n\n                var listeners = eventName.startsWith('vr-') ? this._vrcHelper._eventListeners : this._eventListeners;\n                listeners[eventName] = listener;\n            } else {\n                console.error('@@ on(): unsupported eventName:', eventName);\n            }\n        }\n    }, {\n        key: '_initMouseListeners',\n        value: function _initMouseListeners(canvas) {\n            var _this6 = this;\n\n            // https://stackoverflow.com/questions/6042202/how-to-distinguish-mouse-click-and-drag\n            var isDragging = false; // in closure\n            canvas.addEventListener(\"mousedown\", function (e) {\n                isDragging = false;\n                var coords = Threelet.getMouseCoords(e, canvas);\n                // console.log('@@ mouse down:', ...coords);\n                if (e.button === 0) {\n                    if (_this6._eventListeners['mouse-down-left']) {\n                        var _eventListeners;\n\n                        (_eventListeners = _this6._eventListeners)['mouse-down-left'].apply(_eventListeners, _toConsumableArray(coords));\n                    }\n                } else if (e.button === 1) {\n                    if (_this6._eventListeners['mouse-down-middle']) {\n                        var _eventListeners2;\n\n                        (_eventListeners2 = _this6._eventListeners)['mouse-down-middle'].apply(_eventListeners2, _toConsumableArray(coords));\n                    }\n                } else if (e.button === 2) {\n                    if (_this6._eventListeners['mouse-down-right']) {\n                        var _eventListeners3;\n\n                        (_eventListeners3 = _this6._eventListeners)['mouse-down-right'].apply(_eventListeners3, _toConsumableArray(coords));\n                    }\n                }\n            }, false);\n            canvas.addEventListener(\"mousemove\", function (e) {\n                isDragging = true;\n                var coords = Threelet.getMouseCoords(e, canvas);\n                // console.log('@@ mouse move:', ...coords);\n                if (_this6._eventListeners['mouse-move']) {\n                    var _eventListeners4;\n\n                    (_eventListeners4 = _this6._eventListeners)['mouse-move'].apply(_eventListeners4, _toConsumableArray(coords));\n                }\n            }, false);\n            canvas.addEventListener(\"mouseup\", function (e) {\n                // console.log('e:', e);\n                var coords = Threelet.getMouseCoords(e, canvas);\n                if (isDragging) {\n                    // console.log(\"mouseup: drag\");\n                    if (_this6._eventListeners['mouse-drag-end']) {\n                        var _eventListeners5;\n\n                        (_eventListeners5 = _this6._eventListeners)['mouse-drag-end'].apply(_eventListeners5, _toConsumableArray(coords));\n                    }\n                } else {\n                    // console.log(\"mouseup: click\");\n                    if (e.button === 0) {\n                        // console.log('@@ mouse click left:', ...coords);\n                        if (_this6._eventListeners['mouse-click-left']) {\n                            var _eventListeners6;\n\n                            (_eventListeners6 = _this6._eventListeners)['mouse-click-left'].apply(_eventListeners6, _toConsumableArray(coords));\n                        }\n                    } else if (e.button === 1) {\n                        if (_this6._eventListeners['mouse-click-middle']) {\n                            var _eventListeners7;\n\n                            (_eventListeners7 = _this6._eventListeners)['mouse-click-middle'].apply(_eventListeners7, _toConsumableArray(coords));\n                        }\n                    } else if (e.button === 2) {\n                        // console.log('@@ mouse click right:', ...coords);\n                        if (_this6._eventListeners['mouse-click-right']) {\n                            var _eventListeners8;\n\n                            (_eventListeners8 = _this6._eventListeners)['mouse-click-right'].apply(_eventListeners8, _toConsumableArray(coords));\n                        }\n                    }\n                }\n            }, false);\n        }\n    }, {\n        key: '_raycast',\n        value: function _raycast(meshes, recursive, faceExclude) {\n            var isects = this._raycaster.intersectObjects(meshes, recursive);\n            if (faceExclude) {\n                for (var i = 0; i < isects.length; i++) {\n                    if (isects[i].face !== faceExclude) {\n                        return isects[i];\n                    }\n                }\n                return null;\n            }\n            return isects.length > 0 ? isects[0] : null;\n        }\n    }, {\n        key: '_raycastFromMouse',\n        value: function _raycastFromMouse(mx, my, width, height, cam, meshes) {\n            var recursive = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n\n            var mouse = new THREE.Vector2( // normalized (-1 to +1)\n            mx / width * 2 - 1, -(my / height) * 2 + 1);\n            // https://threejs.org/docs/#api/core/Raycaster\n            // update the picking ray with the camera and mouse position\n            this._raycaster.setFromCamera(mouse, cam);\n            return this._raycast(meshes, recursive, null);\n        }\n    }, {\n        key: 'raycast',\n        value: function raycast(origin, direction, meshes) {\n            var recursive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n            var faceExclude = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n            this._raycaster.set(origin, direction);\n            return this._raycast(meshes, recursive, faceExclude);\n        }\n    }, {\n        key: 'raycastFromMouse',\n        value: function raycastFromMouse(mx, my, meshes) {\n            var recursive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n            var _renderer$domElement = this.renderer.domElement,\n                width = _renderer$domElement.width,\n                height = _renderer$domElement.height;\n\n            return this._raycastFromMouse(mx, my, width, height, this.camera, meshes, recursive);\n        }\n    }, {\n        key: 'raycastFromController',\n        value: function raycastFromController(i, meshes) {\n            var recursive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n            return this._vrcHelper.raycastFromController(this._vrcHelper.getControllers()[i], meshes, recursive);\n        }\n    }, {\n        key: 'dispose',\n        value: function dispose() {\n            this.onDestroy();\n\n            this.updateLoop(0); // stop the loop\n            this.update = null;\n\n            if (this.controls) {\n                this.controls.dispose();\n                this.controls = null;\n            }\n\n            if (this.stats) {\n                this.stats.dom.remove();\n            }\n\n            if (this.vrButton) {\n                this.vrButton.remove();\n            }\n\n            // this also ensures releasing memory for objects freed by freeScene()\n            this.renderer.dispose();\n            this.renderer = null;\n\n            // recursively release child objects in the scene\n            Threelet.freeScene(this.scene);\n            this.scene = null;\n\n            this.camera = null;\n        }\n    }], [{\n        key: 'isVrSupported',\n        value: function isVrSupported() {\n            // https://github.com/mrdoob/three.js/blob/dev/examples/js/vr/WebVR.js\n            return 'getVRDisplays' in navigator;\n        }\n    }, {\n        key: '_initBasics',\n        value: function _initBasics(canvas, opts) {\n            var _camera$position;\n\n            var camera = new THREE.PerspectiveCamera(75, canvas.width / canvas.height, 0.001, 1000);\n            (_camera$position = camera.position).set.apply(_camera$position, _toConsumableArray(opts.optCameraPosition));\n            camera.up.set(0, 1, 0); // important for OrbitControls\n\n            var renderer = new THREE.WebGLRenderer({\n                // alpha: true,\n                canvas: canvas\n            });\n            renderer.setPixelRatio(window.devicePixelRatio);\n            console.log('renderer:', renderer);\n\n            // init basic objects --------\n            var scene = opts.optScene ? opts.optScene : new THREE.Scene();\n\n            if (opts.optAxes) {\n                var walls = new THREE.LineSegments(new THREE.EdgesGeometry(new THREE.BoxBufferGeometry(1, 1, 1)), new THREE.LineBasicMaterial({ color: 0xcccccc }));\n                walls.position.set(0, 0, 0);\n                walls.name = 'walls';\n                scene.add(walls);\n                var axes = new THREE.AxesHelper(1);\n                axes.name = 'axes';\n                scene.add(axes);\n            }\n\n            return [scene, camera, renderer];\n        }\n    }, {\n        key: '_resizeCanvasToDisplaySize',\n        value: function _resizeCanvasToDisplaySize(canvas, renderer, camera) {\n            var force = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n            var width = canvas.clientWidth;\n            var height = canvas.clientHeight;\n\n            // adjust displayBuffer size to match\n            if (force || canvas.width != width || canvas.height != height) {\n                // you must pass false here or three.js sadly fights the browser\n                // console.log \"resizing: #{canvas.width} #{canvas.height} -> #{width} #{height}\"\n                renderer.setSize(width, height, false);\n                camera.aspect = width / height;\n                camera.updateProjectionMatrix();\n            }\n        }\n    }, {\n        key: 'getMouseCoords',\n        value: function getMouseCoords(e, canvas) {\n            // https://stackoverflow.com/questions/55677/how-do-i-get-the-coordinates-of-a-mouse-click-on-a-canvas-element/18053642#18053642\n            var rect = canvas.getBoundingClientRect();\n            var mx = e.clientX - rect.left;\n            var my = e.clientY - rect.top;\n            // console.log('getMouseCoords():', mx, my, canvas.width, canvas.height);\n            return [mx, my];\n        }\n    }, {\n        key: 'freeScene',\n        value: function freeScene(scene) {\n            Threelet._freeChildren(scene, scene.children);\n        }\n    }, {\n        key: '_freeChildren',\n        value: function _freeChildren(_parent, _children) {\n            while (_children.length > 0) {\n                var ch = _children[0];\n                Threelet._freeChildren(ch, ch.children);\n                console.log('@@ freeing: one obj:', ch.name);\n                console.log('@@ freeing obj ' + ch.uuid + ' of ' + _parent.uuid);\n                _parent.remove(ch);\n                Threelet.disposeObject(ch);\n                ch = null;\n            }\n        }\n    }, {\n        key: 'disposeObject',\n        value: function disposeObject(obj) {\n            // https://gist.github.com/j-devel/6d0323264b6a1e47e2ee38bc8647c726\n            if (obj.geometry) obj.geometry.dispose();\n            if (obj.material) Threelet.disposeMaterial(obj.material);\n            if (obj.texture) obj.texture.dispose();\n        }\n    }, {\n        key: 'disposeMaterial',\n        value: function disposeMaterial(mat) {\n            if (mat.map) mat.map.dispose();\n            mat.dispose();\n        }\n    }]);\n\n    return Threelet;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Threelet);\n\n//# sourceURL=webpack://Threelet/./src/index.js?");

/***/ })

/******/ })["default"];
});